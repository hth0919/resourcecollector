// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generated.proto

package CRM

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package


func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ed858329eb171d, []int{0}
}

func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterInfo.Unmarshal(m, b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterInfo.Size(m)
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetMetricValue() []string {
	if m != nil {
		return m.MetricValue
	}
	return nil
}

func (m *ClusterInfo) GetClustername() string {
	if m != nil {
		return m.Clustername
	}
	return ""
}

func (m *ClusterInfo) GetKubeConfig() string {
	if m != nil {
		return m.KubeConfig
	}
	return ""
}

func (m *ClusterInfo) GetAdminToken() string {
	if m != nil {
		return m.AdminToken
	}
	return ""
}

func (m *ClusterInfo) GetNodeList() []*NodeInfo {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *ClusterInfo) GetClusterMetricSum() map[string]float64 {
	if m != nil {
		return m.ClusterMetricSum
	}
	return nil
}

func (m *ClusterInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}



func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ed858329eb171d, []int{1}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeInfo) GetPodList() []*PodInfo {
	if m != nil {
		return m.PodList
	}
	return nil
}

func (m *NodeInfo) GetNodeMetricSum() map[string]float64 {
	if m != nil {
		return m.NodeMetricSum
	}
	return nil
}

func (m *NodeInfo) GetNodeCapacity() map[string]int64 {
	if m != nil {
		return m.NodeCapacity
	}
	return nil
}

func (m *NodeInfo) GetNodeAllocatable() map[string]int64 {
	if m != nil {
		return m.NodeAllocatable
	}
	return nil
}

func (m *NodeInfo) GetGeoInfo() map[string]string {
	if m != nil {
		return m.GeoInfo
	}
	return nil
}

func (m *NodeInfo) GetCpuCores() float64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *NodeInfo) GetMemoryTotal() float64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *NodeInfo) GetScrapeError() float64 {
	if m != nil {
		return m.ScrapeError
	}
	return 0
}


func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ed858329eb171d, []int{2}
}

func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfo.Unmarshal(m, b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return xxx_messageInfo_PodInfo.Size(m)
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *PodInfo) GetPodMetrics() map[string]float64 {
	if m != nil {
		return m.PodMetrics
	}
	return nil
}


func (m *TimeTick) Reset()         { *m = TimeTick{} }
func (m *TimeTick) String() string { return proto.CompactTextString(m) }
func (*TimeTick) ProtoMessage()    {}
func (*TimeTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6ed858329eb171d, []int{3}
}

func (m *TimeTick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeTick.Unmarshal(m, b)
}
func (m *TimeTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeTick.Marshal(b, m, deterministic)
}
func (m *TimeTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTick.Merge(m, src)
}
func (m *TimeTick) XXX_Size() int {
	return xxx_messageInfo_TimeTick.Size(m)
}
func (m *TimeTick) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTick.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTick proto.InternalMessageInfo

func (m *TimeTick) GetTick() int64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func init() {
	proto.RegisterType((*ClusterInfo)(nil), "CRM.ClusterInfo")
	proto.RegisterMapType((map[string]float64)(nil), "CRM.ClusterInfo.ClusterMetricSumEntry")
	proto.RegisterType((*NodeInfo)(nil), "CRM.NodeInfo")
	proto.RegisterMapType((map[string]string)(nil), "CRM.NodeInfo.GeoInfoEntry")
	proto.RegisterMapType((map[string]int64)(nil), "CRM.NodeInfo.NodeAllocatableEntry")
	proto.RegisterMapType((map[string]int64)(nil), "CRM.NodeInfo.NodeCapacityEntry")
	proto.RegisterMapType((map[string]float64)(nil), "CRM.NodeInfo.NodeMetricSumEntry")
	proto.RegisterType((*PodInfo)(nil), "CRM.PodInfo")
	proto.RegisterMapType((map[string]float64)(nil), "CRM.PodInfo.PodMetricsEntry")
	proto.RegisterType((*TimeTick)(nil), "CRM.TimeTick")
}

func init() {
	proto.RegisterFile("generated.proto", fileDescriptor_e6ed858329eb171d)
}

var fileDescriptor_e6ed858329eb171d = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6a, 0xdb, 0x30,
	0x14, 0x9e, 0xe3, 0xa4, 0x49, 0x4e, 0x52, 0x92, 0x89, 0x0e, 0x84, 0x19, 0x5d, 0xc8, 0x45, 0xe9,
	0x6e, 0xcc, 0xe8, 0x76, 0x31, 0xca, 0x46, 0xd7, 0x99, 0xee, 0x87, 0x35, 0x25, 0x38, 0x61, 0xf7,
	0x4e, 0xac, 0x16, 0x13, 0xdb, 0x0a, 0xb2, 0x3c, 0xc8, 0xdb, 0xec, 0x59, 0xf6, 0x36, 0x7b, 0x8b,
	0xa2, 0x23, 0x3b, 0x91, 0xe3, 0x42, 0xc9, 0x55, 0xce, 0xcf, 0xf7, 0x7d, 0xf1, 0xf9, 0x74, 0x24,
	0x18, 0x3c, 0xb0, 0x94, 0x89, 0x40, 0xb2, 0xd0, 0x5d, 0x0b, 0x2e, 0x39, 0xb1, 0x3d, 0x7f, 0x32,
	0xfe, 0xdf, 0x80, 0x9e, 0x17, 0xe7, 0x99, 0x64, 0xe2, 0x67, 0x7a, 0xcf, 0xc9, 0x08, 0x7a, 0x13,
	0x26, 0x45, 0xb4, 0xfc, 0x1d, 0xc4, 0x39, 0xa3, 0xd6, 0xc8, 0x3e, 0xef, 0xfa, 0x66, 0x49, 0x21,
	0x0a, 0x42, 0x1a, 0x24, 0x8c, 0x36, 0x46, 0x96, 0x42, 0x18, 0x25, 0x72, 0x0a, 0xf0, 0x2b, 0x5f,
	0x30, 0x8f, 0xa7, 0xf7, 0xd1, 0x03, 0xb5, 0x11, 0x60, 0x54, 0x54, 0xff, 0x3a, 0x4c, 0xa2, 0x74,
	0xce, 0x57, 0x2c, 0xa5, 0x4d, 0xdd, 0xdf, 0x55, 0xc8, 0x5b, 0xe8, 0xdc, 0xf1, 0x90, 0xdd, 0x46,
	0x99, 0xa4, 0xad, 0x91, 0x7d, 0xde, 0xbb, 0x38, 0x76, 0x3d, 0x7f, 0xe2, 0xaa, 0xa2, 0xfa, 0x48,
	0x7f, 0xdb, 0x26, 0x3e, 0x0c, 0x8b, 0x7f, 0xd6, 0x9f, 0x38, 0xcb, 0x13, 0x7a, 0x84, 0x94, 0x33,
	0xa4, 0x18, 0xa3, 0xb9, 0xfb, 0xc0, 0x9b, 0x54, 0x8a, 0x8d, 0x5f, 0xe3, 0x13, 0x02, 0xcd, 0x1f,
	0x3c, 0x93, 0xb4, 0x8b, 0x1f, 0x86, 0xb1, 0xe3, 0xc1, 0xab, 0x27, 0xe9, 0x64, 0x08, 0xf6, 0x8a,
	0x6d, 0xa8, 0x85, 0x58, 0x15, 0x92, 0x13, 0x68, 0xfd, 0x41, 0xef, 0x94, 0x33, 0x96, 0xaf, 0x93,
	0xcb, 0xc6, 0x47, 0x6b, 0xfc, 0xaf, 0xa5, 0x07, 0x43, 0xa3, 0x1d, 0x1d, 0xdf, 0x29, 0x0f, 0x35,
	0x7b, 0x9b, 0x93, 0x33, 0x68, 0x4f, 0x79, 0x88, 0xf3, 0x37, 0x70, 0x98, 0x3e, 0x0e, 0x33, 0xe5,
	0x21, 0x8e, 0x5f, 0x36, 0xc9, 0x37, 0x38, 0x56, 0x9c, 0xdd, 0xe8, 0x36, 0xa2, 0x47, 0x15, 0xb7,
	0xdc, 0x0a, 0x44, 0x0f, 0x5d, 0xa5, 0x11, 0x0f, 0xfa, 0xaa, 0xe0, 0x05, 0xeb, 0x60, 0x19, 0xc9,
	0x0d, 0x6d, 0xa2, 0xcc, 0x9b, 0xba, 0x4c, 0x89, 0xd0, 0x2a, 0x15, 0x12, 0xb9, 0x85, 0x81, 0xca,
	0xaf, 0xe3, 0x98, 0x2f, 0x03, 0x19, 0x2c, 0x62, 0x56, 0x1c, 0xde, 0xb8, 0xae, 0x63, 0x80, 0xb4,
	0xd4, 0x3e, 0x95, 0x7c, 0x80, 0xf6, 0x77, 0xc6, 0x15, 0xa1, 0x38, 0x4f, 0xa7, 0xaa, 0x52, 0x34,
	0x35, 0xbb, 0x84, 0x2a, 0x53, 0xbd, 0x75, 0xee, 0x71, 0xc1, 0x32, 0xda, 0x46, 0xfb, 0xb7, 0xb9,
	0xde, 0xec, 0x84, 0x8b, 0xcd, 0x9c, 0xcb, 0x20, 0xa6, 0x1d, 0x6c, 0x9b, 0x25, 0x85, 0x98, 0x2d,
	0x45, 0xb0, 0x66, 0x37, 0x42, 0x70, 0x81, 0xe7, 0x6f, 0xf9, 0x66, 0xc9, 0xf9, 0x02, 0xa4, 0xee,
	0xe6, 0x21, 0x3b, 0xe0, 0x5c, 0xc1, 0xcb, 0x9a, 0x91, 0xcf, 0x09, 0xd8, 0xa6, 0xc0, 0x57, 0x38,
	0x79, 0xca, 0xc1, 0x83, 0x34, 0x2e, 0xa1, 0x6f, 0xfa, 0xf7, 0x1c, 0xb7, 0x6b, 0x2e, 0xf1, 0x5f,
	0x0b, 0x97, 0x13, 0xed, 0xa6, 0x18, 0x1a, 0x2b, 0x5c, 0xa6, 0xe4, 0x13, 0xc0, 0x94, 0x87, 0xda,
	0xa7, 0xac, 0x58, 0xe2, 0xd7, 0xe6, 0x12, 0xbb, 0xbb, 0xb6, 0x3e, 0x43, 0x03, 0xef, 0x7c, 0x86,
	0xc1, 0x5e, 0xfb, 0xa0, 0x7b, 0x76, 0x0a, 0x9d, 0x79, 0x94, 0xb0, 0x79, 0xb4, 0x5c, 0xa9, 0xcb,
	0xac, 0x7e, 0x91, 0x68, 0xfb, 0x18, 0x5f, 0x5c, 0x41, 0x6f, 0xc6, 0xd2, 0xb0, 0xb8, 0xd0, 0xe4,
	0x5d, 0x35, 0x1d, 0xee, 0x3f, 0x1c, 0x8e, 0x7e, 0x7d, 0x4a, 0xc9, 0xf1, 0x8b, 0xc5, 0x11, 0x3e,
	0xa0, 0xef, 0x1f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x87, 0xef, 0x9d, 0x53, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SendClusterClient is the client API for SendCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendClusterClient interface {
	SendCluster(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*TimeTick, error)
}

type sendClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClusterClient(cc grpc.ClientConnInterface) SendClusterClient {
	return &sendClusterClient{cc}
}

func (c *sendClusterClient) SendCluster(ctx context.Context, in *ClusterInfo, opts ...grpc.CallOption) (*TimeTick, error) {
	out := new(TimeTick)
	err := c.cc.Invoke(ctx, "/CRM.SendCluster/SendCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendClusterServer is the server API for SendCluster service.
type SendClusterServer interface {
	SendCluster(context.Context, *ClusterInfo) (*TimeTick, error)
}

// UnimplementedSendClusterServer can be embedded to have forward compatible implementations.
type UnimplementedSendClusterServer struct {
}

func (*UnimplementedSendClusterServer) SendCluster(ctx context.Context, req *ClusterInfo) (*TimeTick, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCluster not implemented")
}

func RegisterSendClusterServer(s *grpc.Server, srv SendClusterServer) {
	s.RegisterService(&_SendCluster_serviceDesc, srv)
}

func _SendCluster_SendCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendClusterServer).SendCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CRM.SendCluster/SendCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendClusterServer).SendCluster(ctx, req.(*ClusterInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CRM.SendCluster",
	HandlerType: (*SendClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCluster",
			Handler:    _SendCluster_SendCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated.proto",
}
